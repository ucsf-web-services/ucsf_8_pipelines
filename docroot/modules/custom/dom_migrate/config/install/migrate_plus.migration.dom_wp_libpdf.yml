# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: dom_wp_libpdf

# A human-friendly description of the migration.
label: Migreate the libaray from the new prevention file system

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: dom

source:
  plugin: url
  data_fetcher_plugin: file
  data_parser_plugin: xml
  urls:  /Users/austentong/Sites/ucsf8/docroot/modules/custom/dom_migrate/source/wp_lib_migration4.xml
  item_selector: /nodes/node
  fields:
    -
      name: field_title
      label: 'page title'
      selector: title
    -
      name: field_body
      label: 'page body'
      selector: content
    -
      name: field_loc
      label: 'page location tag'
      selector: type
    -
      name: field_link
      label: 'page link to content'
      selector: pdf
    -
      name: field_id
      label: 'page unique id for importing'
      selector: tax
    -
      name: article_url
      label: 'link to outside article'
      selector: url

  constants:
    file_directory: public://
  ids:
    field_id:
      type: int

# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:node

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  type:
    plugin: default_value
    default_value: research_project
  field_page_name: field_title
  title: field_title
  field_term_research_category: field_loc
  body/value: field_body
  body/format:
    plugin: default_value
    default_value: sf_full_html

  field_article: article_url

  destination_basename:
    plugin: callback
    callable: basename
    source: field_link
  destination_path:
    plugin: concat
    source:
      - 'constants/file_directory'
      - '@destination_basename'
  field_file:
    -
      plugin: skip_on_empty
      method: process
      source: field_link
      message: 'there was an empty field'
    -
      plugin: file_copy
      source:
        - field_link
        - '@destination_path'
    -
      plugin: entity_generate
  status:
    plugin: default_value
    default_value: 0

  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.


# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - dom_migrate
